(()=>{var e={9414:(e,t,r)=>{"use strict";var n,o=r(5382),i=r.n(o),s=r(9583),a=r.n(s),l=r(4155),u=r(3261),h=r(831),c=r.n(h),p=r(7420),d=r(1068),f=r(1486),m=r(8172),v=r.n(m),E=r(1909),g={throttle:v()},w=null,b=null,I=g.throttle((function(){w=b;var e=b.map((function(e){return e.remove("chromeSessionId")})),t={savedWindowStateVersion:1,savedWindowState:JSON.stringify(e,null,2)};chrome.storage.local.set(t,(function(){c().debug((new Date).toString()+" succesfully wrote window state")}))}),3e4),R=r(7619),$=r.n(R),y=r(6986),T=(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),N=function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function s(e){try{l(n.next(e))}catch(e){i(e)}}function a(e){try{l(n.throw(e))}catch(e){i(e)}}function l(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}l((n=n.apply(e,t||[])).next())}))},O=function(e,t){var r,n,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;s;)try{if(r=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,n=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],n=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}},S=function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,o,i=r.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(n=i.next()).done;)s.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(r=i.return)&&r.call(i)}finally{if(o)throw o.error}}return s},L={has:i(),fromPairs:a()},A=c().getLogger("chrome-events"),x=null,C=null,k=function(e){return!L.has(e,"url")&&"_"!==e.title[0]};function P(e,t){return N(this,void 0,void 0,(function(){var r,n,o;return O(this,(function(i){if(e.children)for(r=0;r<e.children.length;r++)if((n=e.children[r]).title.toLowerCase()===t.toLowerCase())return[2,n];return c().info("Child folder ",t," Not found, creating..."),o={parentId:e.id,title:t},[2,$().bookmarks.create(o)]}))}))}function M(e,t,r){return void 0===r&&(r=!1),N(this,void 0,void 0,(function(){var n,o;return O(this,(function(i){switch(i.label){case 0:return A.debug("Chrome Event: tabs.onCreated: ",t),[4,(0,E.awaitableUpdate)(e,(function(e){var n=e.getTabWindowByChromeId(t.windowId);if(!n)return c().warn("tabs.onCreated: window id not found: ",t.windowId),[e,null];var o=void 0;if(t.openerTabId){var i=n.findChromeTabId(t.openerTabId);if(i){var s=S(i,2);s[0],o=s[1].url}}var a=e.handleTabCreated(n,t,o),l=a.getTabWindowByChromeId(t.windowId);return[r?a.handleTabActivated(l,t.id):a,null]}))];case 1:return n=S.apply(void 0,[i.sent(),2]),o=n[0],n[1],o.preferences.dedupeTabs&&t.id&&G(o,e,t.id,t,t),[2]}}))}))}function D(e,t,r){c().debug("onTabRemoved: ",t,r),(0,E.update)(e,(function(e){var n=e.getTabWindowByChromeId(t);return n?e.handleTabClosed(n,r):(c().info("tabs.onTabRemoved: window id not found: ",t),e)}))}var G=function(e,t,r,n,o){return N(void 0,void 0,void 0,(function(){var i,s,a,l,u,h,p,d,m,v;return O(this,(function(E){switch(E.label){case 0:E.label=1;case 1:return E.trys.push([1,4,,5]),null!=(i=n.url)&&i.length>0?(s=e.getTabItemByChromeTabId(r))&&s.open&&s.openState.openerUrl===i?(c().debug("dedupeTab: user-initiated Duplicate of ",i,", skipping..."),[2]):(a=e.findURL(i),l=function(e,t){return e.open&&e.openWindowId===o.windowId&&t.open&&t.openState.openTabId===r},(u=a.filter((function(e){var t=S(e,2),r=t[0],n=t[1];return!l(r,n)}))).length>0?(h=S(u[0],2),p=h[0],d=h[1],c().debug("*** dedupeTab: closing detected duplicate tab ",r),m=e.getTabWindowByChromeId(o.windowId),[4,f.on(m,r,t)]):[3,3]):[3,3];case 2:E.sent(),f.me(p,d,0,t),E.label=3;case 3:return[3,5];case 4:return v=E.sent(),c().warn("caught error during tab de-dup (ignoring...): ",v),[3,5];case 5:return[2]}}))}))},B=function(e,t,r,n,o){c().debug("handleBookmarkUpdate: ",r),(0,E.update)(e,(function(e){var i,s=e;if(k(r))t===x&&(i=e.getSavedWindowByBookmarkId(r.id))&&(s=o(e,i));else if(i=e.getSavedWindowByBookmarkId(t)){var a=i.findChromeBookmarkId(r.id);if(a){var l=S(a,2),u=l[0],h=l[1];s=n(e,i,u,h)}}return s}))};var F={windowId:-1,matches:l.D5(),bestMatch:null,tabCount:0},j=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return T(t,e),t}(l.WV(F));function U(e,t){var r=e.getUrlBookmarkIdMap(),n=l.dM(t).map((function(t){return function(e,t,r){var n=r.tabs.map((function(e){return t.get(e.url,null)})).filter((function(e){return null!==e})).map((function(e){return e.countBy((function(e){return e}))})).reduce((function(e,t){return e.mergeWith((function(e,t){return e+t}),t)}),l.D5()),o=n.filter((function(t,n){var o=r.tabs.length,i=e.bookmarkIdMap.get(n).tabItems.count();return t>1||1===i&&1===t||t===o||t/i>=.25})),i=d.TJ(o);return new j({windowId:r.id,matches:n,bestMatch:i,tabCount:r.tabs.length})}(e,r,t)})).filter((function(e){return e.bestMatch})).groupBy((function(e){return e.bestMatch})).map((function(e){var t=e.map((function(e){var t=e.matches.get(e.bestMatch);return[e.windowId,t]}));return l.D5(t)})).map((function(e){return d.TJ(e)})).filter((function(e){return e})),o=L.fromPairs(t.map((function(e){return[e.id,e]})));return n.reduce((function(e,t,r){var n=o[t],i=e.bookmarkIdMap.get(r);return e.attachChromeWindow(i,n)}),e)}function W(e){return N(this,void 0,void 0,(function(){var t;return O(this,(function(r){switch(r.label){case 0:return[4,$().windows.getAll({populate:!0})];case 1:return t=r.sent(),[2,U(e,t)]}}))}))}function _(e){return N(this,void 0,void 0,(function(){var t,r,n,o,i,s,a,u,h,p,d,f,m,v,E,g,w,b;return O(this,(function(I){switch(I.label){case 0:return[4,$().storage.local.get("savedWindowState")];case 1:if(!(t=I.sent()))return[2,e];if(!(r=t.savedWindowState))return c().debug("loadSnapState: no saved window state found in local storage"),[2,e];n=JSON.parse(r),c().debug("loadSnapState: read: ",n),o=e.bookmarkIdMap.filter((function(e){return!e.open})),i=o.keys(),s={};try{for(a=function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}(i),u=a.next();!u.done;u=a.next())h=u.value,(p=n[h])&&(d=p.tabItems.filter((function(e){return e.open}))).length>0&&(f=d.map((function(e){return y.vw(e)})),m=l.aV(f),s[h]=m)}catch(e){w={error:e}}finally{try{u&&!u.done&&(b=a.return)&&b.call(a)}finally{if(w)throw w.error}}return v=Object.keys(s).length,c().debug("read window snapshot state for ",v," saved windows"),E=e.bookmarkIdMap.map((function(e,t){var r=s[t];if(null==r)return e;var n=e.tabItems.filter((function(e){return e.saved})).map(y.aQ),o=y.u3(n,r);return e.set("tabItems",o).set("snapshot",!0)})),g=e.set("bookmarkIdMap",E),c().debug("merged window state snapshot from local storage"),[2,g]}}))}))}!function e(){return N(this,void 0,void 0,(function(){var t,r,n,o;return O(this,(function(i){switch(i.label){case 0:return i.trys.push([0,8,,9]),d.Ub(c()),d.Ub(A),c().info("bgHelper started, env: ","production"),f.SE(e),[4,N(void 0,void 0,void 0,(function(){var e,t,r,n,o,i,s,a,l;return O(this,(function(h){switch(h.label){case 0:return[4,$().bookmarks.getTree()];case 1:return e=h.sent(),t=e[0].children,void 0===(r=t[1])?(c().warn("Could not attach to Chrome predefined 'Other Bookmarks' folder"),c().warn("Attempting to attach to root (Boomarks Bar) as a workaround for Brave Browser issue"),c().warn("See https://github.com/brave/brave-browser/issues/7639 for additional info"),r=t[t.length-1]):c().debug("'Other Bookmarks' folder acquired"),[4,P(r,"Tabli Saved Windows")];case 2:return n=h.sent(),x=n.id,[4,P(n,"_Archive")];case 3:return o=h.sent(),C=o.id,[4,$().bookmarks.getSubTree(n.id)];case 4:return i=h.sent(),s=new p.Z({folderId:x,archiveFolderId:C}),a=function(e,t){c().debug("loadManagedWindows:  tabliFolder: ",t);for(var r=[],n=0;n<t.children.length;n++){var o=t.children[n];k(o)&&r.push(y.si(o))}return e.registerTabWindows(r)}(s,i[0]),[4,$().storage.local.get({readRelNotesVersion:""})];case 5:return l=h.sent(),d=a,f=l.readRelNotesVersion,m=chrome.runtime.getManifest(),v=!u.valid(f)||u.gt(m.version,f),[2,d.set("showRelNotes",v)]}var d,f,m,v}))}))];case 1:return[4,W(i.sent())];case 2:return[4,_(i.sent())];case 3:return t=i.sent(),r=(0,E.mkRef)(t),window.stateRef=r,window.isExtension=!0,[4,f.kK(r)];case 4:return i.sent(),[4,f.bm(r)];case 5:return i.sent(),c().debug("initial sync of chrome windows complete."),c().debug("before sync: stateRef: ",r),[4,f.cG(r)];case 6:return i.sent(),a=r,chrome.runtime.onConnect.addListener((function(e){A.debug("Chrome Event: onConnect"),e.onMessage.addListener((function(t){A.debug("Chrome Event: onMessage ",t);var r=t.listenerId;e.onDisconnect.addListener((function(){A.debug("Chrome Event: onDisconnect"),(0,E.removeStateChangeListener)(a,r),c().debug("Removed view listener ",r)}))}))})),function(e){chrome.windows.onRemoved.addListener((function(t){A.debug("Chrome Event:: windows.onRemoved: ",t),(0,E.update)(e,(function(e){var r;if(t!==chrome.windows.WINDOW_ID_NONE&&t===e.popoutWindowId)c().debug("detected close of popout window id ",t," -- clearing"),r=e.set("popoutWindowId",chrome.windows.WINDOW_ID_NONE);else{var n=e.getTabWindowByChromeId(t);r=n?e.handleTabWindowClosed(n):e}return r}))})),chrome.windows.onCreated.addListener((function(t){A.debug("Chrome Event:: windows.onCreated: ",t),(0,E.update)(e,(function(e){return e.syncChromeWindow(t)}))})),chrome.windows.onFocusChanged.addListener((function(t){A.debug("Chrome Event:: windows.onFocusChanged: ",t),t!==chrome.windows.WINDOW_ID_NONE&&(0,E.update)(e,(function(e){return e.setCurrentWindowId(t)}))})),chrome.tabs.onCreated.addListener((function(t){return M(e,t)})),chrome.tabs.onUpdated.addListener((function(t,r,n){return function(e,t,r,n){return N(void 0,void 0,void 0,(function(){var o,i;return O(this,(function(s){switch(s.label){case 0:return A.debug("Chrome Event: tabs.onUpdated: ",t,r,n),[4,(0,E.awaitableUpdate)(e,(function(e){var o=e.getTabWindowByChromeId(n.windowId);return o?[e.handleTabUpdated(o,t,r),null]:(c().warn("tabs.onUpdated: window id not found: ",n.windowId),[e,null])}))];case 1:return o=S.apply(void 0,[s.sent(),2]),i=o[0],o[1],i.preferences.dedupeTabs&&G(i,e,t,r,n),[2]}}))}))}(e,t,r,n)})),chrome.tabs.onActivated.addListener((function(t){A.debug("Chrome Event: tabs.onActivated: ",t),(0,E.update)(e,(function(e){var r=e.getTabWindowByChromeId(t.windowId);return r?r?e.handleTabActivated(r,t.tabId):e:(c().warn("tabs.onActivated: window id not found: ",t.windowId,t),e)}))})),chrome.tabs.onRemoved.addListener((function(t,r){A.debug("Chrome Event: tabs.onRemoved: ",t,r),r.isWindowClosing||D(e,r.windowId,t)})),chrome.tabs.onReplaced.addListener((function(t,r){A.debug("Chrome Event: tabs.onReplaced: added: ",t,", removed: ",r),(0,E.update)(e,(function(n){var o=n.getTabWindowByChromeTabId(r);if(!o)return c().info("tabs.onReplaced: could not find window for removed tab: ",r),n;var i=n.handleTabClosed(o,r);return chrome.tabs.get(t,(function(t){return M(e,t)})),i}))})),chrome.tabs.onMoved.addListener((function(t,r){A.debug("Chrome Event: tabs.onMoved: ",t,r),f.BZ(r.windowId,e)})),chrome.tabs.onDetached.addListener((function(t,r){A.debug("Chrome Event: tabs.onDetached: ",t,r),D(e,r.oldWindowId,t)})),chrome.tabs.onAttached.addListener((function(t,r){A.debug("Chrome Event: tabs.onAttached: ",t,r),chrome.tabs.get(t,(function(t){return M(e,t,!0)}))})),chrome.bookmarks.onCreated.addListener((function(t,r){return function(e,t,r){A.debug("Chrome Event: boomarks.onCreated: ",t,r),(0,E.update)(e,(function(e){var t,n=e;if(k(r)){if(r.parentId===x&&!(t=e.getSavedWindowByBookmarkId(r.id))){var o=y.si(r);n=e.registerTabWindow(o)}}else(t=e.getSavedWindowByBookmarkId(r.parentId))&&(t.findChromeBookmarkId(r.id)||(c().debug("new bookmark in saved window: ",r),n=e.handleBookmarkCreated(t,r)));return n}))}(e,t,r)})),chrome.bookmarks.onRemoved.addListener((function(t,r){return function(e,t,r){A.debug("Chrome Event: bookmarks.onRemoved: ",t,r),B(e,r.parentId,r.node,(function(e,t,r,n){return e.handleTabUnsaved(t,n)}),(function(e,t){return e.unmanageWindow(t)}))}(e,t,r)})),chrome.bookmarks.onMoved.addListener((function(t,r){return function(e,t,r){A.debug("Chrome Event: bookmarks.onMoved: ",t,r),r.oldParentId===x&&r.parentId===C&&(0,E.update)(e,(function(e){var r=e,n=e.getSavedWindowByBookmarkId(t.toString());return n&&(r=e.unmanageWindow(n)),r}))}(e,t,r)})),chrome.bookmarks.onChanged.addListener((function(t,r){return function(e,t,r){return N(void 0,void 0,void 0,(function(){var n,o;return O(this,(function(i){switch(i.label){case 0:return A.debug("Chrome Event: bookmarks.Onchanged: ",t,r),[4,$().bookmarks.get(t)];case 1:return(n=i.sent())&&n.length>0&&(o=n[0],B(e,o.parentId,o,(function(e,t,n,o){return e.handleBookmarkUpdated(t,o,r)}),(function(e,t){return function(e,t,r){return null==r?e:e.updateSavedWindowTitle(t,r)}(e,t,r.title)}))),[2]}}))}))}(e,t,r)}))}(r),function(e){N(this,void 0,void 0,(function(){var t,r,n;return O(this,(function(o){switch(o.label){case 0:return t=(0,E.mutableGet)(e),r=t.getTabWindowsByType("popup").filter((function(e){return e.open&&"Tabli"===e.title})),n=r.map((function(e){return $().windows.remove(e.openWindowId)})).toJS(),[4,Promise.all(n)];case 1:return o.sent(),[2]}}))}))}(r),[4,f._w(r)];case 7:return n=i.sent(),c().info("main: popoutOnStart: ",n.preferences.popoutOnStart),n.preferences.popoutOnStart&&f.dB(r),chrome.commands.onCommand.addListener((function(e){A.debug("Chrome Event: onCommand: ",e),"show_popout"===e&&f.dB(r)})),s=r,(0,E.addStateChangeListener)(s,(function(e){var t,r,n,o,i,s,a;b=e.bookmarkIdMap,null==w?w=b:((r=w,n=b,o=r.keySeq().toSet(),i=n.keySeq().toSet(),s=o.subtract(i),a=n.keySeq().filter((function(e){return!s.has(e)&&r.get(e)!==n.get(e)})).map((function(e){return n.get(e)})),t={deletes:s,updates:a}).deletes.count()>0||t.updates.count()>0)&&I()})),c().debug("savedState.init: registered state change listener"),[3,9];case 8:return o=i.sent(),c().error("*** caught top level exception: ",o),[3,9];case 9:return[2]}var s,a}))}))}()},9583:e=>{e.exports=function(e){for(var t=-1,r=null==e?0:e.length,n={};++t<r;){var o=e[t];n[o[0]]=o[1]}return n}},8172:(e,t,r)=>{var n=r(6897),o=r(3619);e.exports=function(e,t,r){var i=!0,s=!0;if("function"!=typeof e)throw new TypeError("Expected a function");return o(r)&&(i="leading"in r?!!r.leading:i,s="trailing"in r?!!r.trailing:s),n(e,t,{leading:i,maxWait:t,trailing:s})}},3666:(e,t,r)=>{"use strict";const n=r(1123),o=Symbol("max"),i=Symbol("length"),s=Symbol("lengthCalculator"),a=Symbol("allowStale"),l=Symbol("maxAge"),u=Symbol("dispose"),h=Symbol("noDisposeOnSet"),c=Symbol("lruList"),p=Symbol("cache"),d=Symbol("updateAgeOnGet"),f=()=>1,m=(e,t,r)=>{const n=e[p].get(t);if(n){const t=n.value;if(v(e,t)){if(g(e,n),!e[a])return}else r&&(e[d]&&(n.value.now=Date.now()),e[c].unshiftNode(n));return t.value}},v=(e,t)=>{if(!t||!t.maxAge&&!e[l])return!1;const r=Date.now()-t.now;return t.maxAge?r>t.maxAge:e[l]&&r>e[l]},E=e=>{if(e[i]>e[o])for(let t=e[c].tail;e[i]>e[o]&&null!==t;){const r=t.prev;g(e,t),t=r}},g=(e,t)=>{if(t){const r=t.value;e[u]&&e[u](r.key,r.value),e[i]-=r.length,e[p].delete(r.key),e[c].removeNode(t)}};class w{constructor(e,t,r,n,o){this.key=e,this.value=t,this.length=r,this.now=n,this.maxAge=o||0}}const b=(e,t,r,n)=>{let o=r.value;v(e,o)&&(g(e,r),e[a]||(o=void 0)),o&&t.call(n,o.value,o.key,e)};e.exports=class{constructor(e){if("number"==typeof e&&(e={max:e}),e||(e={}),e.max&&("number"!=typeof e.max||e.max<0))throw new TypeError("max must be a non-negative number");this[o]=e.max||1/0;const t=e.length||f;if(this[s]="function"!=typeof t?f:t,this[a]=e.stale||!1,e.maxAge&&"number"!=typeof e.maxAge)throw new TypeError("maxAge must be a number");this[l]=e.maxAge||0,this[u]=e.dispose,this[h]=e.noDisposeOnSet||!1,this[d]=e.updateAgeOnGet||!1,this.reset()}set max(e){if("number"!=typeof e||e<0)throw new TypeError("max must be a non-negative number");this[o]=e||1/0,E(this)}get max(){return this[o]}set allowStale(e){this[a]=!!e}get allowStale(){return this[a]}set maxAge(e){if("number"!=typeof e)throw new TypeError("maxAge must be a non-negative number");this[l]=e,E(this)}get maxAge(){return this[l]}set lengthCalculator(e){"function"!=typeof e&&(e=f),e!==this[s]&&(this[s]=e,this[i]=0,this[c].forEach((e=>{e.length=this[s](e.value,e.key),this[i]+=e.length}))),E(this)}get lengthCalculator(){return this[s]}get length(){return this[i]}get itemCount(){return this[c].length}rforEach(e,t){t=t||this;for(let r=this[c].tail;null!==r;){const n=r.prev;b(this,e,r,t),r=n}}forEach(e,t){t=t||this;for(let r=this[c].head;null!==r;){const n=r.next;b(this,e,r,t),r=n}}keys(){return this[c].toArray().map((e=>e.key))}values(){return this[c].toArray().map((e=>e.value))}reset(){this[u]&&this[c]&&this[c].length&&this[c].forEach((e=>this[u](e.key,e.value))),this[p]=new Map,this[c]=new n,this[i]=0}dump(){return this[c].map((e=>!v(this,e)&&{k:e.key,v:e.value,e:e.now+(e.maxAge||0)})).toArray().filter((e=>e))}dumpLru(){return this[c]}set(e,t,r){if((r=r||this[l])&&"number"!=typeof r)throw new TypeError("maxAge must be a number");const n=r?Date.now():0,a=this[s](t,e);if(this[p].has(e)){if(a>this[o])return g(this,this[p].get(e)),!1;const s=this[p].get(e).value;return this[u]&&(this[h]||this[u](e,s.value)),s.now=n,s.maxAge=r,s.value=t,this[i]+=a-s.length,s.length=a,this.get(e),E(this),!0}const d=new w(e,t,a,n,r);return d.length>this[o]?(this[u]&&this[u](e,t),!1):(this[i]+=d.length,this[c].unshift(d),this[p].set(e,this[c].head),E(this),!0)}has(e){if(!this[p].has(e))return!1;const t=this[p].get(e).value;return!v(this,t)}get(e){return m(this,e,!0)}peek(e){return m(this,e,!1)}pop(){const e=this[c].tail;return e?(g(this,e),e.value):null}del(e){g(this,this[p].get(e))}load(e){this.reset();const t=Date.now();for(let r=e.length-1;r>=0;r--){const n=e[r],o=n.e||0;if(0===o)this.set(n.k,n.v);else{const e=o-t;e>0&&this.set(n.k,n.v,e)}}}prune(){this[p].forEach(((e,t)=>m(this,t,!1)))}}},4765:(e,t,r)=>{const n=Symbol("SemVer ANY");class o{static get ANY(){return n}constructor(e,t){if(t=i(t),e instanceof o){if(e.loose===!!t.loose)return e;e=e.value}u("comparator",e,t),this.options=t,this.loose=!!t.loose,this.parse(e),this.semver===n?this.value="":this.value=this.operator+this.semver.version,u("comp",this)}parse(e){const t=this.options.loose?s[a.COMPARATORLOOSE]:s[a.COMPARATOR],r=e.match(t);if(!r)throw new TypeError(`Invalid comparator: ${e}`);this.operator=void 0!==r[1]?r[1]:"","="===this.operator&&(this.operator=""),r[2]?this.semver=new h(r[2],this.options.loose):this.semver=n}toString(){return this.value}test(e){if(u("Comparator.test",e,this.options.loose),this.semver===n||e===n)return!0;if("string"==typeof e)try{e=new h(e,this.options)}catch(e){return!1}return l(e,this.operator,this.semver,this.options)}intersects(e,t){if(!(e instanceof o))throw new TypeError("a Comparator is required");if(t&&"object"==typeof t||(t={loose:!!t,includePrerelease:!1}),""===this.operator)return""===this.value||new c(e.value,t).test(this.value);if(""===e.operator)return""===e.value||new c(this.value,t).test(e.semver);const r=!(">="!==this.operator&&">"!==this.operator||">="!==e.operator&&">"!==e.operator),n=!("<="!==this.operator&&"<"!==this.operator||"<="!==e.operator&&"<"!==e.operator),i=this.semver.version===e.semver.version,s=!(">="!==this.operator&&"<="!==this.operator||">="!==e.operator&&"<="!==e.operator),a=l(this.semver,"<",e.semver,t)&&(">="===this.operator||">"===this.operator)&&("<="===e.operator||"<"===e.operator),u=l(this.semver,">",e.semver,t)&&("<="===this.operator||"<"===this.operator)&&(">="===e.operator||">"===e.operator);return r||n||i&&s||a||u}}e.exports=o;const i=r(4681),{re:s,t:a}=r(9720),l=r(7221),u=r(6638),h=r(3292),c=r(3514)},3514:(e,t,r)=>{class n{constructor(e,t){if(t=i(t),e instanceof n)return e.loose===!!t.loose&&e.includePrerelease===!!t.includePrerelease?e:new n(e.raw,t);if(e instanceof s)return this.raw=e.value,this.set=[[e]],this.format(),this;if(this.options=t,this.loose=!!t.loose,this.includePrerelease=!!t.includePrerelease,this.raw=e,this.set=e.split(/\s*\|\|\s*/).map((e=>this.parseRange(e.trim()))).filter((e=>e.length)),!this.set.length)throw new TypeError(`Invalid SemVer Range: ${e}`);if(this.set.length>1){const e=this.set[0];if(this.set=this.set.filter((e=>!f(e[0]))),0===this.set.length)this.set=[e];else if(this.set.length>1)for(const e of this.set)if(1===e.length&&m(e[0])){this.set=[e];break}}this.format()}format(){return this.range=this.set.map((e=>e.join(" ").trim())).join("||").trim(),this.range}toString(){return this.range}parseRange(e){e=e.trim();const t=`parseRange:${Object.keys(this.options).join(",")}:${e}`,r=o.get(t);if(r)return r;const n=this.options.loose,i=n?u[h.HYPHENRANGELOOSE]:u[h.HYPHENRANGE];e=e.replace(i,O(this.options.includePrerelease)),a("hyphen replace",e),e=e.replace(u[h.COMPARATORTRIM],c),a("comparator trim",e,u[h.COMPARATORTRIM]),e=(e=(e=e.replace(u[h.TILDETRIM],p)).replace(u[h.CARETTRIM],d)).split(/\s+/).join(" ");const l=n?u[h.COMPARATORLOOSE]:u[h.COMPARATOR],m=e.split(" ").map((e=>E(e,this.options))).join(" ").split(/\s+/).map((e=>N(e,this.options))).filter(this.options.loose?e=>!!e.match(l):()=>!0).map((e=>new s(e,this.options))),v=(m.length,new Map);for(const e of m){if(f(e))return[e];v.set(e.value,e)}v.size>1&&v.has("")&&v.delete("");const g=[...v.values()];return o.set(t,g),g}intersects(e,t){if(!(e instanceof n))throw new TypeError("a Range is required");return this.set.some((r=>v(r,t)&&e.set.some((e=>v(e,t)&&r.every((r=>e.every((e=>r.intersects(e,t)))))))))}test(e){if(!e)return!1;if("string"==typeof e)try{e=new l(e,this.options)}catch(e){return!1}for(let t=0;t<this.set.length;t++)if(S(this.set[t],e,this.options))return!0;return!1}}e.exports=n;const o=new(r(3666))({max:1e3}),i=r(4681),s=r(4765),a=r(6638),l=r(3292),{re:u,t:h,comparatorTrimReplace:c,tildeTrimReplace:p,caretTrimReplace:d}=r(9720),f=e=>"<0.0.0-0"===e.value,m=e=>""===e.value,v=(e,t)=>{let r=!0;const n=e.slice();let o=n.pop();for(;r&&n.length;)r=n.every((e=>o.intersects(e,t))),o=n.pop();return r},E=(e,t)=>(a("comp",e,t),e=I(e,t),a("caret",e),e=w(e,t),a("tildes",e),e=$(e,t),a("xrange",e),e=T(e,t),a("stars",e),e),g=e=>!e||"x"===e.toLowerCase()||"*"===e,w=(e,t)=>e.trim().split(/\s+/).map((e=>b(e,t))).join(" "),b=(e,t)=>{const r=t.loose?u[h.TILDELOOSE]:u[h.TILDE];return e.replace(r,((t,r,n,o,i)=>{let s;return a("tilde",e,t,r,n,o,i),g(r)?s="":g(n)?s=`>=${r}.0.0 <${+r+1}.0.0-0`:g(o)?s=`>=${r}.${n}.0 <${r}.${+n+1}.0-0`:i?(a("replaceTilde pr",i),s=`>=${r}.${n}.${o}-${i} <${r}.${+n+1}.0-0`):s=`>=${r}.${n}.${o} <${r}.${+n+1}.0-0`,a("tilde return",s),s}))},I=(e,t)=>e.trim().split(/\s+/).map((e=>R(e,t))).join(" "),R=(e,t)=>{a("caret",e,t);const r=t.loose?u[h.CARETLOOSE]:u[h.CARET],n=t.includePrerelease?"-0":"";return e.replace(r,((t,r,o,i,s)=>{let l;return a("caret",e,t,r,o,i,s),g(r)?l="":g(o)?l=`>=${r}.0.0${n} <${+r+1}.0.0-0`:g(i)?l="0"===r?`>=${r}.${o}.0${n} <${r}.${+o+1}.0-0`:`>=${r}.${o}.0${n} <${+r+1}.0.0-0`:s?(a("replaceCaret pr",s),l="0"===r?"0"===o?`>=${r}.${o}.${i}-${s} <${r}.${o}.${+i+1}-0`:`>=${r}.${o}.${i}-${s} <${r}.${+o+1}.0-0`:`>=${r}.${o}.${i}-${s} <${+r+1}.0.0-0`):(a("no pr"),l="0"===r?"0"===o?`>=${r}.${o}.${i}${n} <${r}.${o}.${+i+1}-0`:`>=${r}.${o}.${i}${n} <${r}.${+o+1}.0-0`:`>=${r}.${o}.${i} <${+r+1}.0.0-0`),a("caret return",l),l}))},$=(e,t)=>(a("replaceXRanges",e,t),e.split(/\s+/).map((e=>y(e,t))).join(" ")),y=(e,t)=>{e=e.trim();const r=t.loose?u[h.XRANGELOOSE]:u[h.XRANGE];return e.replace(r,((r,n,o,i,s,l)=>{a("xRange",e,r,n,o,i,s,l);const u=g(o),h=u||g(i),c=h||g(s),p=c;return"="===n&&p&&(n=""),l=t.includePrerelease?"-0":"",u?r=">"===n||"<"===n?"<0.0.0-0":"*":n&&p?(h&&(i=0),s=0,">"===n?(n=">=",h?(o=+o+1,i=0,s=0):(i=+i+1,s=0)):"<="===n&&(n="<",h?o=+o+1:i=+i+1),"<"===n&&(l="-0"),r=`${n+o}.${i}.${s}${l}`):h?r=`>=${o}.0.0${l} <${+o+1}.0.0-0`:c&&(r=`>=${o}.${i}.0${l} <${o}.${+i+1}.0-0`),a("xRange return",r),r}))},T=(e,t)=>(a("replaceStars",e,t),e.trim().replace(u[h.STAR],"")),N=(e,t)=>(a("replaceGTE0",e,t),e.trim().replace(u[t.includePrerelease?h.GTE0PRE:h.GTE0],"")),O=e=>(t,r,n,o,i,s,a,l,u,h,c,p,d)=>`${r=g(n)?"":g(o)?`>=${n}.0.0${e?"-0":""}`:g(i)?`>=${n}.${o}.0${e?"-0":""}`:s?`>=${r}`:`>=${r}${e?"-0":""}`} ${l=g(u)?"":g(h)?`<${+u+1}.0.0-0`:g(c)?`<${u}.${+h+1}.0-0`:p?`<=${u}.${h}.${c}-${p}`:e?`<${u}.${h}.${+c+1}-0`:`<=${l}`}`.trim(),S=(e,t,r)=>{for(let r=0;r<e.length;r++)if(!e[r].test(t))return!1;if(t.prerelease.length&&!r.includePrerelease){for(let r=0;r<e.length;r++)if(a(e[r].semver),e[r].semver!==s.ANY&&e[r].semver.prerelease.length>0){const n=e[r].semver;if(n.major===t.major&&n.minor===t.minor&&n.patch===t.patch)return!0}return!1}return!0}},3292:(e,t,r)=>{const n=r(6638),{MAX_LENGTH:o,MAX_SAFE_INTEGER:i}=r(1087),{re:s,t:a}=r(9720),l=r(4681),{compareIdentifiers:u}=r(2283);class h{constructor(e,t){if(t=l(t),e instanceof h){if(e.loose===!!t.loose&&e.includePrerelease===!!t.includePrerelease)return e;e=e.version}else if("string"!=typeof e)throw new TypeError(`Invalid Version: ${e}`);if(e.length>o)throw new TypeError(`version is longer than ${o} characters`);n("SemVer",e,t),this.options=t,this.loose=!!t.loose,this.includePrerelease=!!t.includePrerelease;const r=e.trim().match(t.loose?s[a.LOOSE]:s[a.FULL]);if(!r)throw new TypeError(`Invalid Version: ${e}`);if(this.raw=e,this.major=+r[1],this.minor=+r[2],this.patch=+r[3],this.major>i||this.major<0)throw new TypeError("Invalid major version");if(this.minor>i||this.minor<0)throw new TypeError("Invalid minor version");if(this.patch>i||this.patch<0)throw new TypeError("Invalid patch version");r[4]?this.prerelease=r[4].split(".").map((e=>{if(/^[0-9]+$/.test(e)){const t=+e;if(t>=0&&t<i)return t}return e})):this.prerelease=[],this.build=r[5]?r[5].split("."):[],this.format()}format(){return this.version=`${this.major}.${this.minor}.${this.patch}`,this.prerelease.length&&(this.version+=`-${this.prerelease.join(".")}`),this.version}toString(){return this.version}compare(e){if(n("SemVer.compare",this.version,this.options,e),!(e instanceof h)){if("string"==typeof e&&e===this.version)return 0;e=new h(e,this.options)}return e.version===this.version?0:this.compareMain(e)||this.comparePre(e)}compareMain(e){return e instanceof h||(e=new h(e,this.options)),u(this.major,e.major)||u(this.minor,e.minor)||u(this.patch,e.patch)}comparePre(e){if(e instanceof h||(e=new h(e,this.options)),this.prerelease.length&&!e.prerelease.length)return-1;if(!this.prerelease.length&&e.prerelease.length)return 1;if(!this.prerelease.length&&!e.prerelease.length)return 0;let t=0;do{const r=this.prerelease[t],o=e.prerelease[t];if(n("prerelease compare",t,r,o),void 0===r&&void 0===o)return 0;if(void 0===o)return 1;if(void 0===r)return-1;if(r!==o)return u(r,o)}while(++t)}compareBuild(e){e instanceof h||(e=new h(e,this.options));let t=0;do{const r=this.build[t],o=e.build[t];if(n("prerelease compare",t,r,o),void 0===r&&void 0===o)return 0;if(void 0===o)return 1;if(void 0===r)return-1;if(r!==o)return u(r,o)}while(++t)}inc(e,t){switch(e){case"premajor":this.prerelease.length=0,this.patch=0,this.minor=0,this.major++,this.inc("pre",t);break;case"preminor":this.prerelease.length=0,this.patch=0,this.minor++,this.inc("pre",t);break;case"prepatch":this.prerelease.length=0,this.inc("patch",t),this.inc("pre",t);break;case"prerelease":0===this.prerelease.length&&this.inc("patch",t),this.inc("pre",t);break;case"major":0===this.minor&&0===this.patch&&0!==this.prerelease.length||this.major++,this.minor=0,this.patch=0,this.prerelease=[];break;case"minor":0===this.patch&&0!==this.prerelease.length||this.minor++,this.patch=0,this.prerelease=[];break;case"patch":0===this.prerelease.length&&this.patch++,this.prerelease=[];break;case"pre":if(0===this.prerelease.length)this.prerelease=[0];else{let e=this.prerelease.length;for(;--e>=0;)"number"==typeof this.prerelease[e]&&(this.prerelease[e]++,e=-2);-1===e&&this.prerelease.push(0)}t&&(this.prerelease[0]===t?isNaN(this.prerelease[1])&&(this.prerelease=[t,0]):this.prerelease=[t,0]);break;default:throw new Error(`invalid increment argument: ${e}`)}return this.format(),this.raw=this.version,this}}e.exports=h},7660:(e,t,r)=>{const n=r(8145);e.exports=(e,t)=>{const r=n(e.trim().replace(/^[=v]+/,""),t);return r?r.version:null}},7221:(e,t,r)=>{const n=r(6355),o=r(2556),i=r(873),s=r(1584),a=r(1258),l=r(5256);e.exports=(e,t,r,u)=>{switch(t){case"===":return"object"==typeof e&&(e=e.version),"object"==typeof r&&(r=r.version),e===r;case"!==":return"object"==typeof e&&(e=e.version),"object"==typeof r&&(r=r.version),e!==r;case"":case"=":case"==":return n(e,r,u);case"!=":return o(e,r,u);case">":return i(e,r,u);case">=":return s(e,r,u);case"<":return a(e,r,u);case"<=":return l(e,r,u);default:throw new TypeError(`Invalid operator: ${t}`)}}},1629:(e,t,r)=>{const n=r(3292),o=r(8145),{re:i,t:s}=r(9720);e.exports=(e,t)=>{if(e instanceof n)return e;if("number"==typeof e&&(e=String(e)),"string"!=typeof e)return null;let r=null;if((t=t||{}).rtl){let t;for(;(t=i[s.COERCERTL].exec(e))&&(!r||r.index+r[0].length!==e.length);)r&&t.index+t[0].length===r.index+r[0].length||(r=t),i[s.COERCERTL].lastIndex=t.index+t[1].length+t[2].length;i[s.COERCERTL].lastIndex=-1}else r=e.match(i[s.COERCE]);return null===r?null:o(`${r[2]}.${r[3]||"0"}.${r[4]||"0"}`,t)}},7123:(e,t,r)=>{const n=r(3292);e.exports=(e,t,r)=>{const o=new n(e,r),i=new n(t,r);return o.compare(i)||o.compareBuild(i)}},6100:(e,t,r)=>{const n=r(7569);e.exports=(e,t)=>n(e,t,!0)},7569:(e,t,r)=>{const n=r(3292);e.exports=(e,t,r)=>new n(e,r).compare(new n(t,r))},3683:(e,t,r)=>{const n=r(8145),o=r(6355);e.exports=(e,t)=>{if(o(e,t))return null;{const r=n(e),o=n(t),i=r.prerelease.length||o.prerelease.length,s=i?"pre":"",a=i?"prerelease":"";for(const e in r)if(("major"===e||"minor"===e||"patch"===e)&&r[e]!==o[e])return s+e;return a}}},6355:(e,t,r)=>{const n=r(7569);e.exports=(e,t,r)=>0===n(e,t,r)},873:(e,t,r)=>{const n=r(7569);e.exports=(e,t,r)=>n(e,t,r)>0},1584:(e,t,r)=>{const n=r(7569);e.exports=(e,t,r)=>n(e,t,r)>=0},5979:(e,t,r)=>{const n=r(3292);e.exports=(e,t,r,o)=>{"string"==typeof r&&(o=r,r=void 0);try{return new n(e,r).inc(t,o).version}catch(e){return null}}},1258:(e,t,r)=>{const n=r(7569);e.exports=(e,t,r)=>n(e,t,r)<0},5256:(e,t,r)=>{const n=r(7569);e.exports=(e,t,r)=>n(e,t,r)<=0},1586:(e,t,r)=>{const n=r(3292);e.exports=(e,t)=>new n(e,t).major},8664:(e,t,r)=>{const n=r(3292);e.exports=(e,t)=>new n(e,t).minor},2556:(e,t,r)=>{const n=r(7569);e.exports=(e,t,r)=>0!==n(e,t,r)},8145:(e,t,r)=>{const{MAX_LENGTH:n}=r(1087),{re:o,t:i}=r(9720),s=r(3292),a=r(4681);e.exports=(e,t)=>{if(t=a(t),e instanceof s)return e;if("string"!=typeof e)return null;if(e.length>n)return null;if(!(t.loose?o[i.LOOSE]:o[i.FULL]).test(e))return null;try{return new s(e,t)}catch(e){return null}}},9810:(e,t,r)=>{const n=r(3292);e.exports=(e,t)=>new n(e,t).patch},262:(e,t,r)=>{const n=r(8145);e.exports=(e,t)=>{const r=n(e,t);return r&&r.prerelease.length?r.prerelease:null}},7215:(e,t,r)=>{const n=r(7569);e.exports=(e,t,r)=>n(t,e,r)},1387:(e,t,r)=>{const n=r(7123);e.exports=(e,t)=>e.sort(((e,r)=>n(r,e,t)))},3286:(e,t,r)=>{const n=r(3514);e.exports=(e,t,r)=>{try{t=new n(t,r)}catch(e){return!1}return t.test(e)}},3731:(e,t,r)=>{const n=r(7123);e.exports=(e,t)=>e.sort(((e,r)=>n(e,r,t)))},7522:(e,t,r)=>{const n=r(8145);e.exports=(e,t)=>{const r=n(e,t);return r?r.version:null}},3261:(e,t,r)=>{const n=r(9720);e.exports={re:n.re,src:n.src,tokens:n.t,SEMVER_SPEC_VERSION:r(1087).SEMVER_SPEC_VERSION,SemVer:r(3292),compareIdentifiers:r(2283).compareIdentifiers,rcompareIdentifiers:r(2283).rcompareIdentifiers,parse:r(8145),valid:r(7522),clean:r(7660),inc:r(5979),diff:r(3683),major:r(1586),minor:r(8664),patch:r(9810),prerelease:r(262),compare:r(7569),rcompare:r(7215),compareLoose:r(6100),compareBuild:r(7123),sort:r(3731),rsort:r(1387),gt:r(873),lt:r(1258),eq:r(6355),neq:r(2556),gte:r(1584),lte:r(5256),cmp:r(7221),coerce:r(1629),Comparator:r(4765),Range:r(3514),satisfies:r(3286),toComparators:r(4275),maxSatisfying:r(3206),minSatisfying:r(7879),minVersion:r(8541),validRange:r(9240),outside:r(922),gtr:r(6291),ltr:r(5262),intersects:r(3780),simplifyRange:r(5002),subset:r(2761)}},1087:e=>{const t=Number.MAX_SAFE_INTEGER||9007199254740991;e.exports={SEMVER_SPEC_VERSION:"2.0.0",MAX_LENGTH:256,MAX_SAFE_INTEGER:t,MAX_SAFE_COMPONENT_LENGTH:16}},6638:e=>{const t="object"==typeof process&&process.env&&process.env.NODE_DEBUG&&/\bsemver\b/i.test(process.env.NODE_DEBUG)?(...e)=>console.error("SEMVER",...e):()=>{};e.exports=t},2283:e=>{const t=/^[0-9]+$/,r=(e,r)=>{const n=t.test(e),o=t.test(r);return n&&o&&(e=+e,r=+r),e===r?0:n&&!o?-1:o&&!n?1:e<r?-1:1};e.exports={compareIdentifiers:r,rcompareIdentifiers:(e,t)=>r(t,e)}},4681:e=>{const t=["includePrerelease","loose","rtl"];e.exports=e=>e?"object"!=typeof e?{loose:!0}:t.filter((t=>e[t])).reduce(((e,t)=>(e[t]=!0,e)),{}):{}},9720:(e,t,r)=>{const{MAX_SAFE_COMPONENT_LENGTH:n}=r(1087),o=r(6638),i=(t=e.exports={}).re=[],s=t.src=[],a=t.t={};let l=0;const u=(e,t,r)=>{const n=l++;o(n,t),a[e]=n,s[n]=t,i[n]=new RegExp(t,r?"g":void 0)};u("NUMERICIDENTIFIER","0|[1-9]\\d*"),u("NUMERICIDENTIFIERLOOSE","[0-9]+"),u("NONNUMERICIDENTIFIER","\\d*[a-zA-Z-][a-zA-Z0-9-]*"),u("MAINVERSION",`(${s[a.NUMERICIDENTIFIER]})\\.(${s[a.NUMERICIDENTIFIER]})\\.(${s[a.NUMERICIDENTIFIER]})`),u("MAINVERSIONLOOSE",`(${s[a.NUMERICIDENTIFIERLOOSE]})\\.(${s[a.NUMERICIDENTIFIERLOOSE]})\\.(${s[a.NUMERICIDENTIFIERLOOSE]})`),u("PRERELEASEIDENTIFIER",`(?:${s[a.NUMERICIDENTIFIER]}|${s[a.NONNUMERICIDENTIFIER]})`),u("PRERELEASEIDENTIFIERLOOSE",`(?:${s[a.NUMERICIDENTIFIERLOOSE]}|${s[a.NONNUMERICIDENTIFIER]})`),u("PRERELEASE",`(?:-(${s[a.PRERELEASEIDENTIFIER]}(?:\\.${s[a.PRERELEASEIDENTIFIER]})*))`),u("PRERELEASELOOSE",`(?:-?(${s[a.PRERELEASEIDENTIFIERLOOSE]}(?:\\.${s[a.PRERELEASEIDENTIFIERLOOSE]})*))`),u("BUILDIDENTIFIER","[0-9A-Za-z-]+"),u("BUILD",`(?:\\+(${s[a.BUILDIDENTIFIER]}(?:\\.${s[a.BUILDIDENTIFIER]})*))`),u("FULLPLAIN",`v?${s[a.MAINVERSION]}${s[a.PRERELEASE]}?${s[a.BUILD]}?`),u("FULL",`^${s[a.FULLPLAIN]}$`),u("LOOSEPLAIN",`[v=\\s]*${s[a.MAINVERSIONLOOSE]}${s[a.PRERELEASELOOSE]}?${s[a.BUILD]}?`),u("LOOSE",`^${s[a.LOOSEPLAIN]}$`),u("GTLT","((?:<|>)?=?)"),u("XRANGEIDENTIFIERLOOSE",`${s[a.NUMERICIDENTIFIERLOOSE]}|x|X|\\*`),u("XRANGEIDENTIFIER",`${s[a.NUMERICIDENTIFIER]}|x|X|\\*`),u("XRANGEPLAIN",`[v=\\s]*(${s[a.XRANGEIDENTIFIER]})(?:\\.(${s[a.XRANGEIDENTIFIER]})(?:\\.(${s[a.XRANGEIDENTIFIER]})(?:${s[a.PRERELEASE]})?${s[a.BUILD]}?)?)?`),u("XRANGEPLAINLOOSE",`[v=\\s]*(${s[a.XRANGEIDENTIFIERLOOSE]})(?:\\.(${s[a.XRANGEIDENTIFIERLOOSE]})(?:\\.(${s[a.XRANGEIDENTIFIERLOOSE]})(?:${s[a.PRERELEASELOOSE]})?${s[a.BUILD]}?)?)?`),u("XRANGE",`^${s[a.GTLT]}\\s*${s[a.XRANGEPLAIN]}$`),u("XRANGELOOSE",`^${s[a.GTLT]}\\s*${s[a.XRANGEPLAINLOOSE]}$`),u("COERCE",`(^|[^\\d])(\\d{1,${n}})(?:\\.(\\d{1,${n}}))?(?:\\.(\\d{1,${n}}))?(?:$|[^\\d])`),u("COERCERTL",s[a.COERCE],!0),u("LONETILDE","(?:~>?)"),u("TILDETRIM",`(\\s*)${s[a.LONETILDE]}\\s+`,!0),t.tildeTrimReplace="$1~",u("TILDE",`^${s[a.LONETILDE]}${s[a.XRANGEPLAIN]}$`),u("TILDELOOSE",`^${s[a.LONETILDE]}${s[a.XRANGEPLAINLOOSE]}$`),u("LONECARET","(?:\\^)"),u("CARETTRIM",`(\\s*)${s[a.LONECARET]}\\s+`,!0),t.caretTrimReplace="$1^",u("CARET",`^${s[a.LONECARET]}${s[a.XRANGEPLAIN]}$`),u("CARETLOOSE",`^${s[a.LONECARET]}${s[a.XRANGEPLAINLOOSE]}$`),u("COMPARATORLOOSE",`^${s[a.GTLT]}\\s*(${s[a.LOOSEPLAIN]})$|^$`),u("COMPARATOR",`^${s[a.GTLT]}\\s*(${s[a.FULLPLAIN]})$|^$`),u("COMPARATORTRIM",`(\\s*)${s[a.GTLT]}\\s*(${s[a.LOOSEPLAIN]}|${s[a.XRANGEPLAIN]})`,!0),t.comparatorTrimReplace="$1$2$3",u("HYPHENRANGE",`^\\s*(${s[a.XRANGEPLAIN]})\\s+-\\s+(${s[a.XRANGEPLAIN]})\\s*$`),u("HYPHENRANGELOOSE",`^\\s*(${s[a.XRANGEPLAINLOOSE]})\\s+-\\s+(${s[a.XRANGEPLAINLOOSE]})\\s*$`),u("STAR","(<|>)?=?\\s*\\*"),u("GTE0","^\\s*>=\\s*0.0.0\\s*$"),u("GTE0PRE","^\\s*>=\\s*0.0.0-0\\s*$")},6291:(e,t,r)=>{const n=r(922);e.exports=(e,t,r)=>n(e,t,">",r)},3780:(e,t,r)=>{const n=r(3514);e.exports=(e,t,r)=>(e=new n(e,r),t=new n(t,r),e.intersects(t))},5262:(e,t,r)=>{const n=r(922);e.exports=(e,t,r)=>n(e,t,"<",r)},3206:(e,t,r)=>{const n=r(3292),o=r(3514);e.exports=(e,t,r)=>{let i=null,s=null,a=null;try{a=new o(t,r)}catch(e){return null}return e.forEach((e=>{a.test(e)&&(i&&-1!==s.compare(e)||(i=e,s=new n(i,r)))})),i}},7879:(e,t,r)=>{const n=r(3292),o=r(3514);e.exports=(e,t,r)=>{let i=null,s=null,a=null;try{a=new o(t,r)}catch(e){return null}return e.forEach((e=>{a.test(e)&&(i&&1!==s.compare(e)||(i=e,s=new n(i,r)))})),i}},8541:(e,t,r)=>{const n=r(3292),o=r(3514),i=r(873);e.exports=(e,t)=>{e=new o(e,t);let r=new n("0.0.0");if(e.test(r))return r;if(r=new n("0.0.0-0"),e.test(r))return r;r=null;for(let t=0;t<e.set.length;++t){const o=e.set[t];let s=null;o.forEach((e=>{const t=new n(e.semver.version);switch(e.operator){case">":0===t.prerelease.length?t.patch++:t.prerelease.push(0),t.raw=t.format();case"":case">=":s&&!i(t,s)||(s=t);break;case"<":case"<=":break;default:throw new Error(`Unexpected operation: ${e.operator}`)}})),!s||r&&!i(r,s)||(r=s)}return r&&e.test(r)?r:null}},922:(e,t,r)=>{const n=r(3292),o=r(4765),{ANY:i}=o,s=r(3514),a=r(3286),l=r(873),u=r(1258),h=r(5256),c=r(1584);e.exports=(e,t,r,p)=>{let d,f,m,v,E;switch(e=new n(e,p),t=new s(t,p),r){case">":d=l,f=h,m=u,v=">",E=">=";break;case"<":d=u,f=c,m=l,v="<",E="<=";break;default:throw new TypeError('Must provide a hilo val of "<" or ">"')}if(a(e,t,p))return!1;for(let r=0;r<t.set.length;++r){const n=t.set[r];let s=null,a=null;if(n.forEach((e=>{e.semver===i&&(e=new o(">=0.0.0")),s=s||e,a=a||e,d(e.semver,s.semver,p)?s=e:m(e.semver,a.semver,p)&&(a=e)})),s.operator===v||s.operator===E)return!1;if((!a.operator||a.operator===v)&&f(e,a.semver))return!1;if(a.operator===E&&m(e,a.semver))return!1}return!0}},5002:(e,t,r)=>{const n=r(3286),o=r(7569);e.exports=(e,t,r)=>{const i=[];let s=null,a=null;const l=e.sort(((e,t)=>o(e,t,r)));for(const e of l)n(e,t,r)?(a=e,s||(s=e)):(a&&i.push([s,a]),a=null,s=null);s&&i.push([s,null]);const u=[];for(const[e,t]of i)e===t?u.push(e):t||e!==l[0]?t?e===l[0]?u.push(`<=${t}`):u.push(`${e} - ${t}`):u.push(`>=${e}`):u.push("*");const h=u.join(" || "),c="string"==typeof t.raw?t.raw:String(t);return h.length<c.length?h:t}},2761:(e,t,r)=>{const n=r(3514),{ANY:o}=r(4765),i=r(3286),s=r(7569),a=(e,t,r)=>{if(e===t)return!0;if(1===e.length&&e[0].semver===o)return 1===t.length&&t[0].semver===o;const n=new Set;let a,h,c,p,d,f,m;for(const t of e)">"===t.operator||">="===t.operator?a=l(a,t,r):"<"===t.operator||"<="===t.operator?h=u(h,t,r):n.add(t.semver);if(n.size>1)return null;if(a&&h){if(c=s(a.semver,h.semver,r),c>0)return null;if(0===c&&(">="!==a.operator||"<="!==h.operator))return null}for(const e of n){if(a&&!i(e,String(a),r))return null;if(h&&!i(e,String(h),r))return null;for(const n of t)if(!i(e,String(n),r))return!1;return!0}for(const e of t){if(m=m||">"===e.operator||">="===e.operator,f=f||"<"===e.operator||"<="===e.operator,a)if(">"===e.operator||">="===e.operator){if(p=l(a,e,r),p===e&&p!==a)return!1}else if(">="===a.operator&&!i(a.semver,String(e),r))return!1;if(h)if("<"===e.operator||"<="===e.operator){if(d=u(h,e,r),d===e&&d!==h)return!1}else if("<="===h.operator&&!i(h.semver,String(e),r))return!1;if(!e.operator&&(h||a)&&0!==c)return!1}return!(a&&f&&!h&&0!==c||h&&m&&!a&&0!==c)},l=(e,t,r)=>{if(!e)return t;const n=s(e.semver,t.semver,r);return n>0?e:n<0||">"===t.operator&&">="===e.operator?t:e},u=(e,t,r)=>{if(!e)return t;const n=s(e.semver,t.semver,r);return n<0?e:n>0||"<"===t.operator&&"<="===e.operator?t:e};e.exports=(e,t,r)=>{if(e===t)return!0;e=new n(e,r),t=new n(t,r);let o=!1;e:for(const n of e.set){for(const e of t.set){const t=a(n,e,r);if(o=o||null!==t,t)continue e}if(o)return!1}return!0}},4275:(e,t,r)=>{const n=r(3514);e.exports=(e,t)=>new n(e,t).set.map((e=>e.map((e=>e.value)).join(" ").trim().split(" ")))},9240:(e,t,r)=>{const n=r(3514);e.exports=(e,t)=>{try{return new n(e,t).range||"*"}catch(e){return null}}},7876:e=>{"use strict";e.exports=function(e){e.prototype[Symbol.iterator]=function*(){for(let e=this.head;e;e=e.next)yield e.value}}},1123:(e,t,r)=>{"use strict";function n(e){var t=this;if(t instanceof n||(t=new n),t.tail=null,t.head=null,t.length=0,e&&"function"==typeof e.forEach)e.forEach((function(e){t.push(e)}));else if(arguments.length>0)for(var r=0,o=arguments.length;r<o;r++)t.push(arguments[r]);return t}function o(e,t,r){var n=t===e.head?new a(r,null,t,e):new a(r,t,t.next,e);return null===n.next&&(e.tail=n),null===n.prev&&(e.head=n),e.length++,n}function i(e,t){e.tail=new a(t,e.tail,null,e),e.head||(e.head=e.tail),e.length++}function s(e,t){e.head=new a(t,null,e.head,e),e.tail||(e.tail=e.head),e.length++}function a(e,t,r,n){if(!(this instanceof a))return new a(e,t,r,n);this.list=n,this.value=e,t?(t.next=this,this.prev=t):this.prev=null,r?(r.prev=this,this.next=r):this.next=null}e.exports=n,n.Node=a,n.create=n,n.prototype.removeNode=function(e){if(e.list!==this)throw new Error("removing node which does not belong to this list");var t=e.next,r=e.prev;return t&&(t.prev=r),r&&(r.next=t),e===this.head&&(this.head=t),e===this.tail&&(this.tail=r),e.list.length--,e.next=null,e.prev=null,e.list=null,t},n.prototype.unshiftNode=function(e){if(e!==this.head){e.list&&e.list.removeNode(e);var t=this.head;e.list=this,e.next=t,t&&(t.prev=e),this.head=e,this.tail||(this.tail=e),this.length++}},n.prototype.pushNode=function(e){if(e!==this.tail){e.list&&e.list.removeNode(e);var t=this.tail;e.list=this,e.prev=t,t&&(t.next=e),this.tail=e,this.head||(this.head=e),this.length++}},n.prototype.push=function(){for(var e=0,t=arguments.length;e<t;e++)i(this,arguments[e]);return this.length},n.prototype.unshift=function(){for(var e=0,t=arguments.length;e<t;e++)s(this,arguments[e]);return this.length},n.prototype.pop=function(){if(this.tail){var e=this.tail.value;return this.tail=this.tail.prev,this.tail?this.tail.next=null:this.head=null,this.length--,e}},n.prototype.shift=function(){if(this.head){var e=this.head.value;return this.head=this.head.next,this.head?this.head.prev=null:this.tail=null,this.length--,e}},n.prototype.forEach=function(e,t){t=t||this;for(var r=this.head,n=0;null!==r;n++)e.call(t,r.value,n,this),r=r.next},n.prototype.forEachReverse=function(e,t){t=t||this;for(var r=this.tail,n=this.length-1;null!==r;n--)e.call(t,r.value,n,this),r=r.prev},n.prototype.get=function(e){for(var t=0,r=this.head;null!==r&&t<e;t++)r=r.next;if(t===e&&null!==r)return r.value},n.prototype.getReverse=function(e){for(var t=0,r=this.tail;null!==r&&t<e;t++)r=r.prev;if(t===e&&null!==r)return r.value},n.prototype.map=function(e,t){t=t||this;for(var r=new n,o=this.head;null!==o;)r.push(e.call(t,o.value,this)),o=o.next;return r},n.prototype.mapReverse=function(e,t){t=t||this;for(var r=new n,o=this.tail;null!==o;)r.push(e.call(t,o.value,this)),o=o.prev;return r},n.prototype.reduce=function(e,t){var r,n=this.head;if(arguments.length>1)r=t;else{if(!this.head)throw new TypeError("Reduce of empty list with no initial value");n=this.head.next,r=this.head.value}for(var o=0;null!==n;o++)r=e(r,n.value,o),n=n.next;return r},n.prototype.reduceReverse=function(e,t){var r,n=this.tail;if(arguments.length>1)r=t;else{if(!this.tail)throw new TypeError("Reduce of empty list with no initial value");n=this.tail.prev,r=this.tail.value}for(var o=this.length-1;null!==n;o--)r=e(r,n.value,o),n=n.prev;return r},n.prototype.toArray=function(){for(var e=new Array(this.length),t=0,r=this.head;null!==r;t++)e[t]=r.value,r=r.next;return e},n.prototype.toArrayReverse=function(){for(var e=new Array(this.length),t=0,r=this.tail;null!==r;t++)e[t]=r.value,r=r.prev;return e},n.prototype.slice=function(e,t){(t=t||this.length)<0&&(t+=this.length),(e=e||0)<0&&(e+=this.length);var r=new n;if(t<e||t<0)return r;e<0&&(e=0),t>this.length&&(t=this.length);for(var o=0,i=this.head;null!==i&&o<e;o++)i=i.next;for(;null!==i&&o<t;o++,i=i.next)r.push(i.value);return r},n.prototype.sliceReverse=function(e,t){(t=t||this.length)<0&&(t+=this.length),(e=e||0)<0&&(e+=this.length);var r=new n;if(t<e||t<0)return r;e<0&&(e=0),t>this.length&&(t=this.length);for(var o=this.length,i=this.tail;null!==i&&o>t;o--)i=i.prev;for(;null!==i&&o>e;o--,i=i.prev)r.push(i.value);return r},n.prototype.splice=function(e,t,...r){e>this.length&&(e=this.length-1),e<0&&(e=this.length+e);for(var n=0,i=this.head;null!==i&&n<e;n++)i=i.next;var s=[];for(n=0;i&&n<t;n++)s.push(i.value),i=this.removeNode(i);for(null===i&&(i=this.tail),i!==this.head&&i!==this.tail&&(i=i.prev),n=0;n<r.length;n++)i=o(this,i,r[n]);return s},n.prototype.reverse=function(){for(var e=this.head,t=this.tail,r=e;null!==r;r=r.prev){var n=r.prev;r.prev=r.next,r.next=n}return this.head=t,this.tail=e,this};try{r(7876)(n)}catch(e){}}},t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={id:n,loaded:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.loaded=!0,o.exports}r.m=e,r.x=e=>{},r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),r.hmd=e=>((e=Object.create(e)).children||(e.children=[]),Object.defineProperty(e,"exports",{enumerable:!0,set:()=>{throw new Error("ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: "+e.id)}}),e),r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),r.j=1,(()=>{var e={1:0},t=[[9414,0]],n=e=>{},o=(o,i)=>{for(var s,a,[l,u,h,c]=i,p=0,d=[];p<l.length;p++)a=l[p],r.o(e,a)&&e[a]&&d.push(e[a][0]),e[a]=0;for(s in u)r.o(u,s)&&(r.m[s]=u[s]);for(h&&h(r),o&&o(i);d.length;)d.shift()();return c&&t.push.apply(t,c),n()},i=self.webpackChunktabli=self.webpackChunktabli||[];function s(){for(var n,o=0;o<t.length;o++){for(var i=t[o],s=!0,a=1;a<i.length;a++){var l=i[a];0!==e[l]&&(s=!1)}s&&(t.splice(o--,1),n=r(r.s=i[0]))}return 0===t.length&&(r.x(),r.x=e=>{}),n}i.forEach(o.bind(null,0)),i.push=o.bind(null,i.push.bind(i));var a=r.x;r.x=()=>(r.x=a||(e=>{}),(n=s)())})(),r.x()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
(()=>{"use strict";var e={6159:(e,t,n)=>{var r=n(831),a=n.n(r),o=n(9526),l=n(3961),i=n(5321),c=n(8315),u=n(4508),s=n(7122),f=n(8562),m=n(1259),d=n(5505),p=(0,f.iv)({width:120,marginLeft:5}),b=(0,f.iv)({width:120,marginLeft:5}),h=(0,f.iv)({marginTop:0,marginBottom:0,marginLeft:0,marginRight:4}),v=(0,f.iv)({marginTop:0,marginBottom:0,marginLeft:0,marginRight:0}),g=(0,f.iv)({marginLeft:8,marginRight:4,marginTop:"auto",marginBottom:"auto"}),y=(0,f.iv)({display:"flex",alignContent:"flex-start"});const x=function(e){var t=e.initialPrefs,n=e.onClose,r=e.onApply,l=e.onSubmit;a().debug("PreferencesModal: initialPrefs: ",t.toJS());var x=function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,a,o=n.call(e),l=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)l.push(r.value)}catch(e){a={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(a)throw a.error}}return l}((0,o.useState)(t),2),E=x[0],w=x[1],k=function(e){e.keyCode===c.Q4?(e.preventDefault(),n()):e.keyCode===c.tt&&N(e)},N=function(e){e.preventDefault(),l(E)},S=E.popoutOnStart,C=E.dedupeTabs,O=E.revertOnOpen,T=E.theme,P=Object.keys(s.n).map((function(e){return o.createElement("option",{key:e,value:e},e)})),j=o.createElement("select",{className:p,name:"theme",value:T,onChange:function(e){return function(e){var t=E.set("theme",e.target.value);a().debug("handleThemeChange: nextPrefs:",t.toJS()),w(t)}(e)}},P),D=E.layout,L=Object.keys(m.$).map((function(e){return o.createElement("option",{key:e,value:e},e)})),A=o.createElement("select",{className:p,name:"layout",value:D,onChange:function(e){return function(e){var t=E.set("layout",e.target.value);a().debug("handleThemeChange: nextPrefs:",t.toJS()),w(t)}(e)}},L),B=(0,d.CJ)(E.fontScaleFactor),F=d.OG.map((function(e){return o.createElement("option",{key:e.toString(),value:e},e.toString())})),I=o.createElement("select",{className:b,name:"fontSize",value:B,onChange:function(e){return function(e){var t=E,n=(0,d.pv)(Number.parseInt(e.target.value)),r=t.set("fontScaleFactor",n);a().debug("handleFontSizeChange: fontSize: ",e.target.value,", nextPrefs:",r.toJS()),w(r)}(e)}},F),J=i.db;return o.createElement(u.Vq,{className:i.HP,title:"Tabli Preferences",onClose:n},o.createElement(u.uT,null,o.createElement("div",{className:i.fH},o.createElement("form",{className:i.GS,onSubmit:N},o.createElement("div",{className:i.r4},o.createElement("div",{className:(0,f.cx)("checkbox",J,y)},o.createElement("input",{type:"checkbox",className:g,checked:S,onChange:function(e){return n=(t=E).set("popoutOnStart",!t.popoutOnStart),void w(n);var t,n}}),o.createElement("label",{className:v},"Show Tabli popout window at startup")),o.createElement("div",{className:(0,f.cx)("checkbox",J,y)},o.createElement("input",{type:"checkbox",className:g,checked:C,onChange:function(e){return n=(t=E).set("dedupeTabs",!t.dedupeTabs),void w(n);var t,n}}),o.createElement("label",{className:v},"Automatically close duplicate tabs")),o.createElement("div",{className:(0,f.cx)("checkbox",J,y)},o.createElement("input",{type:"checkbox",className:g,checked:O,onChange:function(e){return n=(t=E).set("revertOnOpen",!t.revertOnOpen),void w(n);var t,n}}),o.createElement("label",{className:v},"Only re-open saved tabs when re-opening saved windows")),o.createElement("div",null),o.createElement("div",null),o.createElement("div",{className:i.Dt},o.createElement("label",{className:h},"Theme")),j,o.createElement("div",{className:i.Dt},o.createElement("label",{className:h},"Layout")),A,o.createElement("div",{className:i.Dt},o.createElement("label",{className:h},"Font Size")),I)),o.createElement("hr",null),o.createElement("div",{className:i.pi},o.createElement("button",{type:"button",className:"btn btn-default btn-light tabli-dialog-button",onClick:function(e){!function(e){e.preventDefault(),r(t)}(e),n()},tabIndex:0},"Cancel"),o.createElement("button",{type:"button",className:"btn btn-info tabli-dialog-button",onClick:function(e){return function(e){e.preventDefault(),r(E)}(e)},tabIndex:0,onKeyDown:k},"Apply"),o.createElement("button",{type:"button",className:"btn btn-primary btn-default tabli-dialog-button",onClick:function(e){return N(e)},tabIndex:0,onKeyDown:k},"OK")))))};var E=n(1486),w=n(7619),k=n.n(w),N=n(1909),S=function(e,t,n,r){return new(n||(n=Promise))((function(a,o){function l(e){try{c(r.next(e))}catch(e){o(e)}}function i(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(l,i)}c((r=r.apply(e,t||[])).next())}))},C=function(e,t){var n,r,a,o,l={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:i(0),throw:i(1),return:i(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function i(o){return function(i){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;l;)try{if(n=1,r&&(a=2&o[0]?r.return:o[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,o[1])).done)return a;switch(r=0,a&&(o=[2&o[0],a.value]),o[0]){case 0:case 1:a=o;break;case 4:return l.label++,{value:o[1],done:!1};case 5:l.label++,r=o[1],o=[0];continue;case 7:o=l.ops.pop(),l.trys.pop();continue;default:if(!((a=(a=l.trys).length>0&&a[a.length-1])||6!==o[0]&&2!==o[0])){l=0;continue}if(3===o[0]&&(!a||o[1]>a[0]&&o[1]<a[3])){l.label=o[1];break}if(6===o[0]&&l.label<a[1]){l.label=a[1],a=o;break}if(a&&l.label<a[2]){l.label=a[2],l.ops.push(o);break}a[2]&&l.ops.pop(),l.trys.pop();continue}o=t.call(e,l)}catch(e){o=[6,e],r=0}finally{n=a=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,i])}}},O=k(),T=function(){return S(void 0,void 0,void 0,(function(){var e;return C(this,(function(t){switch(t.label){case 0:return a().debug("onClose"),[4,O.tabs.getCurrent()];case 1:return e=t.sent(),a().debug("onClose tab: ",e),e.id&&chrome.tabs.remove([e.id]),[2]}}))}))},P=function(e,t){return S(void 0,void 0,void 0,(function(){return C(this,(function(n){switch(n.label){case 0:return[4,E.$A(t,e)];case 1:return n.sent(),[2]}}))}))};window.onload=function(){return S(void 0,void 0,void 0,(function(){var e,t,n,r,i;return C(this,(function(c){try{e=chrome.extension.getBackgroundPage(),t=e.stateRef,n=(0,N.mutableGet)(t),r=document.getElementById("prefsContent"),i=o.createElement(x,{onClose:T,initialPrefs:n.preferences,onApply:function(e){return P(t,e)},onSubmit:function(e){return n=t,r=e,S(void 0,void 0,void 0,(function(){return C(this,(function(e){switch(e.label){case 0:return[4,P(n,r)];case 1:return e.sent(),[4,T()];case 2:return e.sent(),[2]}}))}));var n,r}}),l.render(i,r)}catch(e){throw a().error("caught exception rendering preferences page:"),a().error(e.stack),e}return[2]}))}))}}},t={};function n(r){if(t[r])return t[r].exports;var a=t[r]={id:r,loaded:!1,exports:{}};return e[r].call(a.exports,a,a.exports,n),a.loaded=!0,a.exports}n.m=e,n.x=e=>{},n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.hmd=e=>((e=Object.create(e)).children||(e.children=[]),Object.defineProperty(e,"exports",{enumerable:!0,set:()=>{throw new Error("ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: "+e.id)}}),e),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),n.j=3,(()=>{var e={3:0},t=[[6159,0]],r=e=>{},a=(a,o)=>{for(var l,i,[c,u,s,f]=o,m=0,d=[];m<c.length;m++)i=c[m],n.o(e,i)&&e[i]&&d.push(e[i][0]),e[i]=0;for(l in u)n.o(u,l)&&(n.m[l]=u[l]);for(s&&s(n),a&&a(o);d.length;)d.shift()();return f&&t.push.apply(t,f),r()},o=self.webpackChunktabli=self.webpackChunktabli||[];function l(){for(var r,a=0;a<t.length;a++){for(var o=t[a],l=!0,i=1;i<o.length;i++){var c=o[i];0!==e[c]&&(l=!1)}l&&(t.splice(a--,1),r=n(n.s=o[0]))}return 0===t.length&&(n.x(),n.x=e=>{}),r}o.forEach(a.bind(null,0)),o.push=a.bind(null,o.push.bind(o));var i=n.x;n.x=()=>(n.x=i||(e=>{}),(r=l)())})(),n.x()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,